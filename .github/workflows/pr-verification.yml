name: PR Verification (All Terraform Modules)

on:
  workflow_call:
    inputs:
      pr_number:
        description: 'Pull Request number for commenting'
        required: false
        type: string
      target_repo_owner:
        description: 'Owner of the repository where PR should be commented'
        required: false
        type: string
      target_repo_name:
        description: 'Name of the repository where PR should be commented'
        required: false
        type: string
    secrets:
      PR_COMMENT_TOKEN:   # <-- renamed; do NOT use GITHUB_TOKEN here
        description: 'Token with permission to comment on the source PR'
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_DEFAULT_REGION:
        required: true

permissions:
  contents: read
  pull-requests: write

jobs:
  find-all-terraform-modules:
    name: Find All Terraform Modules
    runs-on: ubuntu-latest
    outputs:
      tf_dirs: ${{ steps.set-tf-dirs.outputs.tf_dirs }}
    steps:
      - uses: actions/checkout@v4

      - name: Discover all folders containing .tf
        id: set-tf-dirs
        run: |
          mapfile -t tf_dirs < <(
            find . -type f -name '*.tf' -not -path './.git/*' \
              | xargs -n1 dirname \
              | sort -u
          )
          if [ ${#tf_dirs[@]} -eq 0 ]; then
            echo "tf_dirs=[]" >> "$GITHUB_OUTPUT"
          else
            tf_dirs_json=$(jq -c -n '$ARGS.positional' --args "${tf_dirs[@]}")
            echo "tf_dirs=$tf_dirs_json" >> "$GITHUB_OUTPUT"
          fi

  terraform-plan:
    name: Terraform Plan
    needs: find-all-terraform-modules
    if: needs.find-all-terraform-modules.outputs.tf_dirs != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dir: ${{ fromJson(needs.find-all-terraform-modules.outputs.tf_dirs) }}
    env:
      AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION:    ${{ secrets.AWS_DEFAULT_REGION }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3

      - run: terraform init
        working-directory: ${{ matrix.dir }}
      - run: terraform validate
        working-directory: ${{ matrix.dir }}
      - run: terraform plan -out=plan.out
        working-directory: ${{ matrix.dir }}

      - name: Generate Terraform plan JSON
        run: terraform show -json plan.out > plan.json
        working-directory: ${{ matrix.dir }}

      - name: Display Terraform plan
        run: |
          echo "## Terraform Plan for ${{ matrix.dir }}"
          echo "Plan file created successfully"
          if [ -f plan.json ]; then
            echo "JSON plan file size: $(wc -c < plan.json) bytes"
          fi
        working-directory: ${{ matrix.dir }}

      - name: Comment PR with plan
        if: ${{ inputs.pr_number != '' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PR_COMMENT_TOKEN }}   # <-- use the renamed secret
          script: |
            const targetOwner = '${{ inputs.target_repo_owner }}' || context.repo.owner;
            const targetRepo  = '${{ inputs.target_repo_name }}'  || context.repo.repo;
            const prNumber    = parseInt('${{ inputs.pr_number }}');

            const message = `## Terraform Plan for \`${{ matrix.dir }}\`

            ✅ Terraform plan completed successfully.

            - **Directory**: \`${{ matrix.dir }}\`
            - **Status**: Plan generated
            - **Time**: ${new Date().toISOString()}
            `;

            if (!isNaN(prNumber)) {
              await github.rest.issues.createComment({
                owner: targetOwner,
                repo: targetRepo,
                issue_number: prNumber,
                body: message
              });
            }

  pr-verification:
    name: PR Verification
    runs-on: ubuntu-latest
    needs: [find-all-terraform-modules, terraform-plan]
    if: always()
    steps:
      - name: Summary
        run: |
          echo "✅ PR Verification completed"
          echo "Terraform modules found: ${{ needs.find-all-terraform-modules.outputs.tf_dirs }}"
          echo "Terraform plan result: ${{ needs.terraform-plan.result }}"
