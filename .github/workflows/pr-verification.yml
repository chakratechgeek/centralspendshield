# centralspendshield/.github/workflows/pr-verification.yml
name: PR Verification (All Terraform Modules)

on:
  workflow_call:
    inputs:
      pr_number:
        description: 'Pull Request number for commenting'
        required: false
        type: string
      target_repo_owner:
        description: 'Owner of the repository where PR should be commented'
        required: false
        type: string
      target_repo_name:
        description: 'Name of the repository where PR should be commented'
        required: false
        type: string
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  find-all-terraform-modules:
    name: Find All Terraform Modules
    runs-on: ubuntu-latest
    outputs:
      tf_dirs: ${{ steps.set-tf-dirs.outputs.tf_dirs }}
    steps:
      - uses: actions/checkout@v4

      - name: Discover all folders containing .tf
        id: set-tf-dirs
        run: |
          mapfile -t tf_dirs < <(
            find . -type f -name '*.tf' -not -path './.git/*' \
              | xargs -n1 dirname \
              | sort -u
          )
          if [ ${#tf_dirs[@]} -eq 0 ]; then
            echo "tf_dirs=[]" >> "$GITHUB_OUTPUT"
          else
            tf_dirs_json=$(jq -c -n '$ARGS.positional' --args "${tf_dirs[@]}")
            echo "tf_dirs=$tf_dirs_json" >> "$GITHUB_OUTPUT"
          fi

  terraform-plan:
    name: Terraform Plan
    needs: find-all-terraform-modules
    if: needs.find-all-terraform-modules.outputs.tf_dirs != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dir: ${{ fromJson(needs.find-all-terraform-modules.outputs.tf_dirs) }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - run: terraform init
        working-directory: ${{ matrix.dir }}
      - run: terraform validate
        working-directory: ${{ matrix.dir }}
      - run: terraform plan -out=plan.out
        working-directory: ${{ matrix.dir }}
      
      - name: Generate Terraform plan JSON
        run: terraform show -json plan.out > plan.json
        working-directory: ${{ matrix.dir }}
      
      - name: Run Terraform plan analysis
        id: plan-analysis
        run: |
          echo "PLAN_OUTPUT<<EOF" >> $GITHUB_OUTPUT
          python3 << 'PYTHON_SCRIPT'
          import json
          import sys
          
          def get_changed_fields(before, after, path="", action=None):
              changes = []
              # Both dicts: recurse common keys
              if isinstance(before, dict) and isinstance(after, dict):
                  for key in before.keys() & after.keys():
                      new_path = f"{path}.{key}" if path else key
                      changes += get_changed_fields(before[key], after[key], new_path, action)
              # Both lists: recurse each pair by index
              elif isinstance(before, list) and isinstance(after, list):
                  min_len = min(len(before), len(after))
                  for i in range(min_len):
                      changes += get_changed_fields(before[i], after[i], f"{path}[{i}]", action)
              # Leaf: values differ
              else:
                  if before != after:
                      changes.append({
                          "key": path,
                          "before": before,
                          "after": after,
                          "action": action or "update"
                      })
              return changes
          
          # Example usage:
          def highlight_changes(resource_changes):
              if not resource_changes:
                  print("No resource changes found in the plan.")
                  return
                  
              changes_found = False
              for rc in resource_changes:
                  actions = rc["change"]["actions"]
                  before = rc["change"].get("before", {})
                  after = rc["change"].get("after", {})
                  if actions != ["no-op"]:
                      changes_found = True
                      print(f"\nResource: {rc['address']} (Actions: {actions})")
                      diffs = get_changed_fields(before, after, action="update" if "update" in actions else "replace")
                      for diff in diffs:
                          print(f"  {diff['key']}: '{diff['before']}' ‚Üí '{diff['after']}' (action: {diff['action']})")
              
              if not changes_found:
                  print("No changes detected in any resources (all no-op).")
          
          # ---- Main ----
          try:
              with open("plan.json") as f:
                  data = json.load(f)
              print(f"Analyzing Terraform plan for directory: ${{ matrix.dir }}")
              highlight_changes(data.get("resource_changes", []))
          except FileNotFoundError:
              print("Error: plan.json file not found")
              sys.exit(1)
          except json.JSONDecodeError as e:
              print(f"Error: Invalid JSON in plan.json - {e}")
              sys.exit(1)
          except Exception as e:
              print(f"Error analyzing plan: {e}")
              sys.exit(1)
          PYTHON_SCRIPT
          echo "EOF" >> $GITHUB_OUTPUT
        working-directory: ${{ matrix.dir }}
      
      - name: Display plan analysis
        run: |
          echo "## Terraform Plan Analysis for ${{ matrix.dir }}"
          echo "${{ steps.plan-analysis.outputs.PLAN_OUTPUT }}"
      
      - name: Workflow completion status
        run: |
          echo "‚úÖ Terraform plan analysis completed successfully for ${{ matrix.dir }}"
      
      - name: Debug PR commenting info
        run: |
          echo "üîç Debug Info for PR Commenting:"
          echo "  PR Number (direct): ${{ github.event.pull_request.number }}"
          echo "  PR Number (input): ${{ inputs.pr_number }}"
          echo "  Target Owner (input): ${{ inputs.target_repo_owner }}"
          echo "  Target Repo (input): ${{ inputs.target_repo_name }}"
          echo "  Context Owner: ${{ github.repository_owner }}"
          echo "  Context Repo: ${{ github.event.repository.name }}"
          echo "  Event Name: ${{ github.event_name }}"
      
      - name: Comment PR with Terraform plan changes
        if: github.event.pull_request.number || inputs.pr_number
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const output = `## Terraform Plan Changes for \`${{ matrix.dir }}\`
              
              \`\`\`
              ${{ steps.plan-analysis.outputs.PLAN_OUTPUT }}
              \`\`\`
              `;
              
              // Get PR number from either direct PR event or workflow input
              const prNumber = context.payload.pull_request?.number || 
                              '${{ inputs.pr_number }}';
              
              // Get target repository info - handle empty strings
              const targetOwner = '${{ inputs.target_repo_owner }}' || context.repo.owner;
              const targetRepo = '${{ inputs.target_repo_name }}' || context.repo.repo;
              
              console.log(`Debug info:`);
              console.log(`  PR Number: ${prNumber}`);
              console.log(`  Target Owner: ${targetOwner}`);
              console.log(`  Target Repo: ${targetRepo}`);
              console.log(`  Context Owner: ${context.repo.owner}`);
              console.log(`  Context Repo: ${context.repo.repo}`);
              
              if (prNumber && prNumber !== '' && prNumber !== 'undefined') {
                await github.rest.issues.createComment({
                  issue_number: parseInt(prNumber),
                  owner: targetOwner,
                  repo: targetRepo,
                  body: output
                });
                console.log(`‚úÖ Successfully commented on PR #${prNumber} in ${targetOwner}/${targetRepo}`);
              } else {
                console.log('‚ùå No valid PR number available - cannot comment');
                console.log('Analysis will still be available in workflow logs');
              }
            } catch (error) {
              console.log('‚ùå Failed to comment on PR:', error.message);
              console.log('This could be due to permissions or repository access issues');
              console.log('Analysis output:', '${{ steps.plan-analysis.outputs.PLAN_OUTPUT }}');
            }
